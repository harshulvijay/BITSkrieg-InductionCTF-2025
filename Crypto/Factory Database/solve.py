from sympy import mod_inverse

n = 74134545791857015097647638404337252809507348537635739561953527431886222247053944042386280197177378016584995041981585469611227615113483408822810399280098397031430495242554154499515958483894185567955455626311091343635396460604626129074157160902816612131980362279416615411807971773011396951351006948622366174263
p = 9650353092190589052836406561831418940905557714063132460731698367870954646648110075483282706223904697118343312316509002873064488867940556977142988045734459
q = 7682055266127965990142175019874057915369136254681812117964060378549340196790502448550576451904209119352966094028072251624648122073177379733260114669883957
ciphertext = 66051904851731194626032204608053915670610657358232260384157925603444751543251613984876828224611300213558592728735844714650501861589427174228404940599173762014562806268723453321706466197699434659470002133336219294822818774123583355751468130316184372840416622269701777780668505958239321130522424678211814591473

def solve_rsa(n, p, q, ciphertext, e=65537):
    phi = (p - 1) * (q - 1)
    d = mod_inverse(e, phi)
    plaintext_int = pow(ciphertext, d, n)
    
    try:
        byte_length = (plaintext_int.bit_length() + 7) // 8
        plaintext_bytes = plaintext_int.to_bytes(byte_length, byteorder='big')
        plaintext_text = plaintext_bytes.decode('utf-8')
        return plaintext_text
    except:
        return plaintext_int

result = solve_rsa(n, p, q, ciphertext)
print(result)
