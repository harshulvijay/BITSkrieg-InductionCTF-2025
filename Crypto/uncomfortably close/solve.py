N = 52509013465468566496948619064826994867237192110233757079238828112632499446541139584690568660318893281733470178498438181606062147763357863778318425062474720176143635304589710297512167634270802608833159139732081492455507007518105198528602362120776085580204013030523366822023700655844876762835068917846383891841
e = 65537
ct = 14598018599777435460924336526288710570999066004119632049790056845639999266905496594891822126482694179172425838774140300109609501013389637408532822491573519541109582776611115504673370521729593888610253665106350638170749747953895463171618871488740355470467807088647659949646140666541726548863183857135652630108
698040

from Crypto.Util.number import long_to_bytes, isPrime
import math

def is_square(n):
    if n < 0:
        return False
    r = math.isqrt(n)
    return r*r == n

def fermat_factor(N):
    a = math.isqrt(N)
    if a * a < N:
        a += 1
    while True:
        b2 = a*a - N
        if is_square(b2):
            b = math.isqrt(b2)
            return a - b, a + b
        a += 1

p, q = fermat_factor(N)
tot = (p-1)*(q-1)
d = pow(e, -1, tot)
print(long_to_bytes(pow(ct, d, N)).decode())