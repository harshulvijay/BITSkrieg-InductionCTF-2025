from Crypto.Util.number import bytes_to_long, long_to_bytes
from Crypto import Random
import Crypto
import sys
import libnum

e = 3
c1 =  66287166314547072927119202313333930824889968011257702839859839124407427169523124297036675001131878740942453486925648829332642872229288628841904165530073637169609995368448905884031219793208191854544022192982536762691715218200790406832338302894266221303735111967766718547389525758722505198490081936072219263514846437147024145608586256084074032514196616031628607015792477082475127247193564577252580866054796736848588225419012119347079796674250054206493296242391726225413610871092863078752372015909320766245838245975097323546541353535522730067172085275041387699858348510044068275401412078991886881561389924059468063306093941350783770893287361458138170631571192976187854317955939497958112457570538427290739228160625292506809289460926235926954550085987810765234238818358993054279144792493509234011895913791096174303072812180713476463752427098168944361157680960680571875694814577665202880549885420796925408804215532529159829273977
c2 =  1309434862975676251654813112616431828279777292746231659672745152776382866798518782930423595218454986989069048504963156468423916704145171171970556819515019995588917897865883323953273253693598941100797342793498577872745251317243254948870542490777787426135435161936385580947302172246807666640849584924422321541478752917252456135773101472376739738018983288493137612170500430824448940000553366137920339586637494291954453995478447459959137660727169274910037500456146622940648989765906468511260621124013567857146119313045588203458584947268027634405501029895559785708214009769941135624250461339442736392177959751513481774753326188609663106506096641642847038959277450127397065033556339461734345000932665035716197682111306961743566576605875741747643346564269931227645056469084508215908582182585793227486674642454170025692578168273552261307694932560306747561112639734820658409977347971605083391501079219814820538296800037275484844024114
c3 =  341913881604865775328197233760315430613195046019710762685039328706601820509566590744899485998708109888312201804211898314247364547547317365561244775617436756679058200901610443163478236614519401543235692744981299011059398804980628972963736520116414876291219386725197200167019208269650295293811565695618675258434491857602925513024642920993105278207524649319812324612476559017668700467591163208967877499628073294319143833557881328616532755328693878789449166426845790704210015114942900865616680114369638159656229773913792995282545359522854609848512568189811830870079201642385083709858956578602174064022100407539318018703044811054854103130031054226827892145609072286803467900464510169747098200154592257077436642704060809457894122262979269705610474747952748842787665913721875042159859901055438749429872283979570334264810075766754291907305652142079394198519389639066019921371077644370000611825269333378112719549068463081659239659246


n1 =  3267293418836930853348984036455111894516721103103256145335033609646324221896505794199399613115377008937464862384346507561042898074826835743004421153604421470960778638092913165825320651279388245981981432049018334256278953905687018554837829487682599712001063265870626785836672005792061746711311067013377286864215000143150547742490181530638829727577522599828231204837493976831893665616889470264488102105373604269086146737855639757218133988685756730777854853220810176244995909712071724255736947228637593894711025752154297892905325219772694855433370811340818974689969330687220998503929294949978082476789004443865635200496336272791261526004433692734367839996489275541143014471745613040158125472298898443552676023097764114860371402068182030159601440615188521463277344507966381672290499888964132135600926328839385927711553425970753952136788151907894033573289646952849773732917151117475530304812262108259554206003334243609469905789977
n2 =  2263768881227994325540258851872448754458315639999330347558268944930867751682170378028049764699130162769825141493983325795461707974502096710148177571415953006220642014357583237447530302825242377676652180569949500586904769638466926328740359566181829623841354174497843442004919054354617891938717482523199165987859578802775008073154991402154377845965469512615613579070915055637503517021158123680108014570585952402218250236433622134800308862634944528823112931883870384713164248425277349481392753196746098900398144794183707428239467521036089014846593858448367023138443766631272296834896524920743602967809758731171468811636377641784775859028401574480478895053019023700454383043086282230364511280304397967899786172744740686577323281989124058428966202830515681406896918505747121862842987410206325117061414563653182720522690940984065830319160366480827694704802554894591292131368648776197926768472399456294302410232572043276216108215463
n3 =  4342117180242440283631451136882740192192960010066277727888982628393372336057464045664239021956063975176210340581433862771113688824592490174192336639793293734935016305891273277606750085773994028501968276908481092493922814056487364783341207231430069507848266519912672060617871470860255741849535938678410863888828772601716905406655117689499801297968822165523941047604220496031116602644965791556319326435468258515650110898805598872137574436291643905117669854223587805442385460542413494977237304090235890664834691257154949569021363660159316463919804751743017695116739403781458666223905616414816717100572545791731835489762720956655859336276958025616511992543461184054977988762700568460984869368043061510627229122319124664362511860073889836695286195751386281511864747978536134325879972594615195820814659011607789244211101804188430498216154989704825091607607260503455041115697889116511675274820299872710738597673528454209522716717037
if (len(sys.argv)>1):
    c1=int(sys.argv[1])
if (len(sys.argv)>2):
    c2=int(sys.argv[2])
if (len(sys.argv)>3):
    c3=int(sys.argv[3])
if (len(sys.argv)>4):
    n1=int(sys.argv[4])
if (len(sys.argv)>5):
    n2=int(sys.argv[5])
if (len(sys.argv)>6):
    n3=int(sys.argv[6])                
e=3



mod=[n1,n2,n3]
rem=[c1,c2,c3]

res=libnum.solve_crt(rem,mod)

print("\n\nAnswer:")
print(f"\nCipher 1: {c1}, N1={n1}")
print(f"Cipher 2: {c2}, N2={n2}")
print(f"Cipher 3: {c3}, N3={n3}")


print(f"\nWe can solve M^e with CRT to get {res}")
val=libnum.nroot(res,3)
print(f"\nIf we assume e=3, we take the third root to get: {val}")
print("Next we convert this integer to bytes, and display as a string.")
print(f"\nDecipher: {long_to_bytes(val)}")